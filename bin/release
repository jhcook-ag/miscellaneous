#!/usr/bin/env bash
#
# This code is used to source the specified release, upload to prod or staging
#+and then push it to each server necessary. This script relies on SSH
#+keys loaded in ssh-agent with access to root on the push host in production
#+and Git as well as an API key to Newrelic.
#
# This code exits in the event an command returns nonzero. All errors are 
#+logged to /tmp/prod.PID.
#
# Usage: release [-hv] [-c changelog] [-d description] [-w workspace] version
#+where version is release such as 3.35.
#
# Tested on: Mac OSX 10.7.5
#            Ubuntu 13.04
#
# Author: Justin Cook <jhcook@secnix.com>

set -e

declare RELEASE_VERSION                     #Version number such as 3.35
declare DESCRIPTION                         #Description of the release
declare CHANGELOG                           #Specific changes to coe in release
declare MHOST=""                            #Remote management host
declare ENV="staging"                       #Environment to release to
declare RELEASE=true                        #Actually perform the release
declare NOTIFY=true                         #Notify Newrelic
declare WORKSPACE="/tmp/prod.$$"            #Local directory for caching/logging
declare HOST="`hostname`"                   #The host executing this command
declare USER="`whoami`"                     #The user executing this command
declare DOWNLOAD=true                       #Skip downloading release
declare PUSH=true                           #Do not push tarball

function usage()
{
cat << __EOF__
usage: `basename $0` [options] version

`basename $0` is used to push a production release

OPTIONS:
   -h      Show this message
   -c      Quoted string of code changes
   -d      Quoted string of release description
   -e      Specify environment
   -g      Do not download but use [-w] target
   -m      Specify management host
   -n      Do not notify Newrelic
   -p      Do not push
   -r      Do not release
   -v      Verbose
   -w      Directory to use for workspace - defaults /tmp/prod.PID

EXAMPLE:
`basename $0` -vg -w . -e prod -m 10.220.1.10 -d "whatever" -c "whatever" 3.60
__EOF__
}

#########################################################################
# The management host must be contactable. Since this code is set -e the 
# code will exit if a command returns false. There is no reason to make
# this function anything special such as return codes, etc.
#########################################################################
function check_mhost() {
  ssh -o "StrictHostKeyChecking no" -o "CheckHostIP no" -o "ConnectTimeout 5" \
root@${MHOST} \"whoami\" 2>&1 >> /dev/null
}

#########################################################################
# Use `curl` via the proxy to download the release package and save it to
# WORKSPACE.
#########################################################################
function get_release () {
  curl -u deployment:B0nzagame2013 https://asteroid.clientgame.com/nexus/service/local/repositories/release-repository/content/com/package/$RELEASE_VERSION/package-$RELEASE_VERSION-dist.zip -o $WORKSPACE/package-$RELEASE_VERSION-dist.zip
}

##########################################################################
# Use `curl` to send a message to Newrelic of the release including the
# hostname this code is running on, description of the release, any changes
# necessary, the user and the version of the package.
##########################################################################
function notify_newrelic () {
curl -H "x-api-key:4f9f18e940b15054e7d273d61470cc36814234fab4a90c1" \
  -d "deployment[application_id]=1090095" -d "deployment[host]=$HOSTNAME" \
  -d "deployment[description]=$DESCRIPTION" \
  -d "deployment[revision]=$RELEASE_VERSION" \
  -d "deployment[changelog]=$CHANGELOG" \
  -d "deployment[user]=$USER" https://rpm.newrelic.com/deployments.xml
}

##########################################################################
# Use `scp` to transfer the release cached on the workstation to the 
# management node.
##########################################################################
function push_release() {
scp -o "StrictHostKeyChecking no" -o "CheckHostIP no" -o "ConnectTimeout 5" \
  ${WORKSPACE}/package-${RELEASE_VERSION}-dist.zip \
  root@${MHOST}:/root/usersetup/nextgen/
}

##########################################################################
# The IP addresses are hard coded as this function is intended solely for
# production at SportingBet. Upload the release to the management node, copy
# to each web node and then run `fab` to install the client portion. Once
# complete, loop through the web nodes again to install the server portion.
##########################################################################
function release_prod() {
  for host in {1..4} # In the beginning, loop through every host to make sure
  do                 # they are all alive. Else, the code may exit incomplete.
    ssh -o "StrictHostKeyChecking no" -o "CheckHostIP no" -o "ConnectTimeout 5" \
root@10.220.1.1${host} \"whoami\" 2>&1 >> /dev/null
  done
  for host in {1..4} # This is absolutely, positively ugly!
  do
    scp -o "StrictHostKeyChecking no" -o "CheckHostIP no" -o "ConnectTimeout 5" \
      root@${MHOST}:/root/usersetup/nextgen/package-${RELEASE_VERSION}-dist.zip \
      root@10.220.1.1${host}:/tmp/
    fab -H root@10.220.1.1${host} installbundle3:version="$RELEASE_VERSION",envt="$ENV"
  done
  for host in {1..4} # But hey, it works
  do
    fab -H root@10.220.1.1${host} installbundle3:version="$RELEASE_VERSION",ptype="server",envt="$ENV"
  done
}

function release_awsprod() {
  for host in {10.0.100.237,10.0.101.152,10.0.102.180} # Loop through to make sure
  do                 # they are all alive. Else, the code may exit incomplete.
    ssh -o "StrictHostKeyChecking no" -o "CheckHostIP no" -o "ConnectTimeout 5" \
root@${host} \"whoami\" 2>&1 >> /dev/null
  done
  for host in {10.0.100.237,10.0.101.152,10.0.102.180} # This is ugly!
  do
    scp -o "StrictHostKeyChecking no" -o "CheckHostIP no" -o "ConnectTimeout 5" \
      ${WORKSPACE}/package-${RELEASE_VERSION}-dist.zip \
      root@${host}:/tmp/
    fab -H root@${host} installbundle3:version="$RELEASE_VERSION",envt="$ENV"
  done
  for host in {10.0.100.237,10.0.101.152,10.0.102.180} # But hey, it works
  do
    fab -H root@${host} installbundle3:version="$RELEASE_VERSION",ptype="server",envt="$ENV"
  done
}

function release_staging() {
  ssh -o "StrictHostKeyChecking no" -o "CheckHostIP no" -o "ConnectTimeout 5" \
root@$MHOST "mv usersetup/nextgen/package-${RELEASE_VERSION}-dist.zip /tmp"
  fab -H root@$MHOST installbundle3:version="$RELEASE_VERSION",envt="$ENV"
  fab -H root@$MHOST installbundle3:version="$RELEASE_VERSION",ptype="server",envt="$ENV"
}

while getopts "vhc:d:e:gm:nprw:" OPTION
do
  case $OPTION in
    h)
      usage
      exit 0
      ;;
    c)
      CHANGELOG="$OPTARG"
      ;;
    d)
      DESCRIPTION="$OPTARG"
      ;;   
    e)
      ENV="$OPTARG"
      ;;
    g)
      DOWNLOAD=false
      ;;
    m)
      MHOST="$OPTARG"
      ;;
    n)
      NOTIFY=false
      ;;
    p)
      PUSH=false
      ;;
    r)
      RELEASE=false
      ;;
    v)
      set -x
      ;;
    w)
      WORKSPACE="$OPTARG"
      ;;
    ?)
      usage
      exit 1
  esac
done

shift $(( OPTIND - 1 ))
RELEASE_VERSION="$1"

if [[ -z $CHANGELOG ]] || [[ -z $DESCRIPTION ]] || [[ -z $RELEASE_VERSION ]]
then
  usage
  exit 1
fi 

set -o nounset

if [ ! -d $WORKSPACE ] 
then
  mkdir -p $WORKSPACE
fi

if $DOWNLOAD
then
  get_release
fi

if $PUSH
then
  if [ -n "$MHOST" ]
  then
    push_release
  else
    echo "please specify management host"
    exit 1
  fi
fi

if $RELEASE 
then
  if [ -n "$MHOST" ]
  then
    check_mhost
  fi
  if [ $ENV == 'prod' -o $ENV == 'awsprod' ]
  then
    release_${ENV}
    if $NOTIFY
    then
      notify_newrelic
    fi
  else
    release_staging
  fi
fi

exit

